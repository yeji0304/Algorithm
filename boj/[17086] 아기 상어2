import java.util.*;
import java.io.*;

class Shark {
	int x;
	int y;
	
	Shark(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class algoristhm {
	
	static int N, M;
	static int max = 0;
	
	static int[][] check;
	static boolean[][] visited;
	
	static int[] dx = {0, 1, 1, 1, 0, -1, -1, -1};
	static int[] dy = {1, 1, 0, -1, -1, -1, 0, 1};
	
	static void bfs() {
		Queue<Shark> q = new LinkedList<>();
		visited = new boolean[N+1][M+1];
		
		for(int i=0; i<N; i++) {
			for(int j=0; j<M; j++) {
				if(check[i][j] == 1) {
					q.add(new Shark(i,j));
				}
			}
		}
		
		while(!q.isEmpty()) {
			Shark temp = q.poll();
			
			for(int i=0; i<8; i++) {
				int nextX = temp.x + dx[i];
				int nextY = temp.y + dy[i];
				
				if(nextX >= 0 && nextY >= 0 && nextX <N && nextY < M) {
					if(!visited[nextX][nextY] && check[nextX][nextY] == 0) {
						q.add(new Shark(nextX, nextY));
						visited[nextX][nextY] = true;
						check[nextX][nextY] = check[temp.x][temp.y] + 1;
						max = Math.max(max, check[nextX][nextY]);
					}
				}
			}
		}
		System.out.println(max - 1);
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		check = new int[N+1][M+1];
		
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<M; j++) {
				check[i][j]= Integer.parseInt(st.nextToken());
			}
		}
		bfs();
	}
}
